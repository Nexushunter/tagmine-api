name: "Terraform"
on:
  push:
    branches-ignore:
      - main
    paths:
      - ".github/workflows/*"
      - "infrastructure/*"

defaults:
  run:
    working-directory: infrastructure

permissions:
  pull-requests: write

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  ci:
    name: 'CI'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_wrapper: true
          terraform_version: 1.5.3
      - name: Init
        id: init
        run: terraform init
      - name: Format
        id: fmt
        run: terraform fmt -check
      - name: Validate
        id: validate
        run: terraform validate
      - name: Plan
        id: plan
        run: terraform plan
      - name: Submit Comment to PR
        uses: actions/github-script@v6
        if: ${{ success() }}
        env:
          PLAN: "Terraform\n${{ steps.plan.outputs.stdout }}"
          PR: "${{ github.event.number }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Copied from section above https://github.com/marketplace/actions/hashicorp-setup-terraform#inputs
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.PR,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: process.env.PR,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }